#box1{
    width: 200px;
    height: 200px;
    background-color: hsl(240, 73%, 67%);

    /* relative moves the element by a value of your choosing relative to where the element normally is. and you can use the (top, left, right, bottom) attributes to position the elemnt. */
    /* position: relative; */
    /* top: -100px; */
    /* left: -100px; */

    /* This makes the element stay fixed to the (view-port/webbrowser screen) wherever the position specifications state. */
    /* The fixed position value/state could be useful if you had an advertisment or a banner */
    /* position: fixed; */
    /* right: 0px; */
    /* bottom: 0px; */

    /* This is assosiated with the absolute example */
    /* top: 100px;
    left: 100px;
    position: fixed; */

    /* The sticky position value/state is similar to fixed, and while you are in a scrolled area you will be in the location that was specified by the (top, left, right, bottom) attributes, but the moment that you scroll past this position the position set the element that is sticky will then get caught by the web browser view.  */
    position: sticky;
    top: 0px;

}

#box2{
    width: 100px;
    height: 100px;
    background-color: hsl(15, 66%, 52%);

    /* relative moves the element by a value of your choosing relative to where the element normally is. and you can use the (top, left, right, bottom) attributes to position the elemnt. */
    /* position: relative; */
    /* top: -100px; */
    /* left: -100px; */

    /* This makes the element stay fixed to the (view-port/webbrowser screen) wherever the position specifications state. */
    /* The fixed position value/state could be useful if you had an advertisment or a banner */
    /* position: fixed; */
    /* right: 0px; */
    /* bottom: 0px; */

    /* because box 2 is contained within box 1, box 1 is box 2's nearest ansestor. That means that the absolute value/state will always stay within its container  */
    /* position: absolute;
    top: 50px;
    left: 50px; */

}